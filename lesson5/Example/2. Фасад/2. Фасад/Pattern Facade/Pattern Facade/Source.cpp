#include <iostream>
#include <string>
using namespace std;
/*
 * Фасад предоставляет унифицированный интерфейс вместо набора интерфейсов некоторой подсистемы.
 * Фасад определяет интерфейс более высокого уровня, который упрощает использование подсистемы.
 * Разбиение на подсистемы облегчает проектирование сложной системы в целом.
 * Общая цель всякого проектирования - свести к минимуму зависимость подсистем друг от друга и обмен информацией между ними.
 * Один из способов решения этой задачи - введение объекта фасад, предоставляющий единый упрощенный интерфейс к более сложным системным средствам.
 *
 */

	/*
	Классы подсистемы:
	- реализуют функциональность подсистемы;
	- выполняют работу, порученную объектом Facade;
	- ничего не «знают» о существовании фасада, то есть не хранят ссылок на него.
	 */

class SubsystemA
{
public:
	string A1()
	{
		return "Subsystem A, Method A1\n";
	}
	string A2()
	{
		return "Subsystem A, Method A2\n";
	}
};

class SubsystemB
{
public:
	string B1()
	{
		return "Subsystem B, Method B1\n";
	}
};

class SubsystemC
{
public:
	string C1()
	{
		return "Subsystem C, Method C1\n";
	}
};

/*
 * Facade - фасад:
- «знает», каким классам подсистемы адресовать запрос;
- делегирует запросы клиентов подходящим объектам внутри подсистемы;
 */
class Facade
{
	SubsystemA a;
	SubsystemB b;
	SubsystemC c;

public:
	void Operation1()
	{
		cout << "Operation 1\n" + a.A1() + a.A2() + b.B1();
	}
	void Operation2()
	{
		cout << "Operation 2\n" + b.B1() + c.C1();
	}
};

int main()
{
	// Фасад предоставляет клиенту интерфейс более высокого уровня, который упрощает использование подсистемы.
	Facade f;
	f.Operation1();
	f.Operation2();
	
	system("pause");
	return 0;
}